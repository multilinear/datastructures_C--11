
Benchmark results.

TL:DR:
BTREE(arity 5) < AVL < REDBLACK < RREDBLACK 

BTree with arity of 5 is the fastest, beating AVL by ~20%.
AVL is next, consistantly beating redblack by a couple percent.
RedBlack is next, beating rredblack by ~10% due to implementation
RRedblack is lowest, losing another 3% to RedBlack if using the slower balance algorithm

Note: 
  BTree is the only one of these with internal memory allocation, and thus has a different API
  AVL, and RedBlack have identical APIs
  RRedBlack's API differs slightly due to lack of parent pointers, in this way it's simliar to
  BTree (remove takes a key, not a node)

Additionally:
  BTree is not faster due to fewer mallocs, the affect lies elsewhere. Thus even if you need to malloc
  for the BTree and not for AVL, the BTree may still be a win.
  That said, AVL is an in-place structure, never moving your data around, so that has it's own utility
  it also allows external allocation. So both are definitely useful

On experimental results:
  I only show one run here, tests were run several times and the results were surprisingly stable. Variance was relatively low. One reason I run the tests together like I do below is because when they do vary, both generally vary together. Note that for some tests I preloaded the CPU beforehand in case that mattered, I saw little difference so stopped bothering on later tests.

--------------------------------------------------------------------
Full Experiment: (Redblack vs. RRedblack vs. AVL)

Environment:
This experiment was performed on a Dell XPS 12 convertable laptop/tablet with: Intel(R) Core(TM) i7-4500U CPU @ 1.80GHz, ubuntu desktop, gcc 4-8-1-10ubuntu9. Linux kernel 3-11.0-19-generic. CPU was in performance mode, and machine wasn't touched during tests. Other things were running, so this is anything but sanitary.

Experiment:
We generate numbers with rand(), for each we check if it's already in the tree with a "get()" if it's not we add it until we've added 20 million values.
Next we walk throgh and remove the values one by one (we stored them in order in an array, and simply remove them in the same order we added them).

That's the benchmark.

To even the playing field I ran the 3 in serial without touching the machine. I run the entire test prior to timing it to make sure the CPU is already running full bore to get rid of order effects. So On that benchmark here's some runtimes (straight off the console):

0,130 me@blackbox:C++11$ g++ -O3 -std=c++11 redblack_benchmark.cpp && ./a.out && time ./a.out && g++ -O3 -std=c++11 rredblack_benchmark.cpp && ./a.out && time ./a.out && g++ -O3 -std=c++11 avl_benchmark.cpp && ./a.out && time ./a.out
Begin RedBlack.h benchmark
gets 20093205
Begin RedBlack.h benchmark
gets 20093205

real	0m51.763s
user	0m51.413s
sys	0m0.376s
Begin RRedBlack.h benchmark
gets 20093205
Begin RRedBlack.h benchmark
gets 20093205

real	0m58.205s
user	0m57.918s
sys	0m0.316s
Begin AVL.h benchmark
gets 20093205
Begin AVL.h benchmark
gets 20093205

real	0m50.351s
user	0m50.051s
sys	0m0.324s


AVL is the fastest! It should be pretty rare that we randomly select an element in the list.
I'm using "get" to check if the element is already in the tree, if there's a lot of gets that'd give AVL an advantage, so I had it track how many gets. W have twice as many gets as removes or inserts.

Note that I'm not counting remove(get(i)) as a get, partly because that confuses matters with rredblack where that's not how it works.

So, that workload is a bit AVL biased I guess, but overal it's only ~2% between the AVL and RedBlack on this workload. Also interestingly the recursive redblack tree sucks. That's about 13% worse! Earlier tests I ran came up with the same number. 

So, there we have it. AVL and redblack are awesome, and the recursive version is much slower... sadness. 

Now to test if the workload was AVL biased, I tried biasing it MORE twoards the AVL by tripling the number of gets, when I check if the element is in the tree, I do it 3 times making it 60 million gets instead of 20. Here's the results.

0,0 me@blackbox:C++11$ g++ -O3 -std=c++11 redblack_benchmark.cpp && time ./a.out && time ./a.out && g++ -O3 -std=c++11 avl_benchmark.cpp && time ./a.out
Begin RedBlack.h benchmark
gets 20093205

real	0m57.334s
user	0m57.103s
sys	0m0.260s
Begin RedBlack.h benchmark
gets 20093205

real	0m56.508s
user	0m56.214s
sys	0m0.324s
Begin AVL.h benchmark
gets 20093205

real	0m57.155s
user	0m56.847s
sys	0m0.332s


I accidentally ran it twice and you can see the difference is well inside the variance. AVL should've gained on redblack in this scenerio, if those 20k gets were why AVL was doing well... but it did not. 

This implies that AVL and redblack are actually about equivelent - except that AVL find is still faster than redblack (code is the same, and it might not have to go as deep).

Givne this, I would be inclined to use the AVL implementation as things stand. 

------------------------------------------------------------------------------
Followup test (RRedBlack simple algorithm vs. faster algorithm)

To isolate whether RRedBlack is slow due to algorithmic choice, I implemented the other algorithm. It now has a compile switch "SIMPLER_ALGORITHM" which switches it between the slightly more elegant algorithm, and the one more standard one used by RedBlack.

I ran repeated tests, making sure the CPU was loaded prior to the test running - not as rigorously as above, but carefully and several times, and got about this result every time for the new algorithm:

0,0 me@blackbox:C++11$ g++ -O3 --std=c++11 rredblack_benchmark.cpp 
0,0 me@blackbox:C++11$ time ./a.out
Begin RRedBlack.h benchmark
gets 20093205

real  0m55.269s
user  0m54.975s
sys 0m0.320s

As you can see, it is faster... but not much. This explains maybe 3% of the performance loss compared to RedBlack, but not the other 10%. The recursive implementation is simply slower - presumably due to lack of short-circuiting, and modification of the tree as we walk back up it.

------------------------------------------------------------------------------
BTree vs. AVL tree

ckbox:C++11$ g++ -O3 --std=c++11 btree_benchmark.cpp && time ./a.out && g++ -O3 --std=c++11 avl_benchmark.cpp && time ./a.out
Begin BTree.h benchmark
gets 20093205

real  0m42.371s
user  0m42.077s
sys 0m0.315s
Begin AVL.h benchmark
gets 20093205

real  0m51.720s
user  0m51.357s
sys 0m0.384s

Note, BTW, that btree is *extrordinarilly* slow when compiled only O2. running some quick profiling this appears to be due to the accessors I wrote on the BTreeNode class for data and such. Basically, the abstraction costs, and until O3 the complier isn't stripping out those extra calls.

------------------------------------------------------------------------------
BTree vs. AVL tree (AVL only malloc's once)

real  0m49.577s
user  0m49.293s
sys 0m0.300s
Begin BTree.h benchmark
gets 20093205

real  0m41.744s
user  0m41.433s
sys 0m0.328s


Here we see ~15% speed difference, even with the AVL tree not having to allocate at all. This clearly says that the btree is faster under most circumstances.


